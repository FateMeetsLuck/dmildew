/*
This file is just a scratchpad for testing Mildew implementation features.
*/
class Foo {
    doSomething() {
        console.log("a Foo is doing something on " + this);
    }
    get someProp() {
        return 1000;
    }
}

class Bar extends Foo {
    constructor() {
        super();
        this.a = 22;
    }
    doSuper() {
        super.doSomething();
        console.log(super.someProp);
    }
}

let bar = new Bar;
console.log(bar.__proto__.constructor.__proto__.prototype.doSomething);
// the super non-constructor expression should translate to "this.__proto__.constructor.__proto__.prototype"
console.log(bar.__super__.doSomething);

bar.doSuper();

const foo = {a: 22};
Object.defineProperties(foo, { 
    x: { value: 99 }
});
console.log(foo);

Object.defineProperty(foo, 'dumbProp', {
    get: () => 1000
});
console.log(foo.dumbProp);

let entries = [
    ["titties", 69],
    ["stupid", "yes"]
];
console.log(Object.fromEntries(entries));

// console.log(Object.getOwnPropertyNames(Array.prototype).some(name => name=="length"));
console.log(Object.getPrototypeOf([]));

console.log(Object.getPrototypeOf(Object.getPrototypeOf([])));

console.log(foo.__proto__.isPrototypeOf(foo));

Object.setPrototypeOf(foo, {someStupidProperty: 666});
console.log(foo.someStupidProperty);

switch(()=>{return 29;}) {
    case () => 29:
        console.log("This is weird");
        break;
}
console.log("After switch");
// https://pastebin.com/WWzVuZ1p

function randomInt(max) {
    return Math.floor(Math.random() * max);
}
const randomInts = [];
for(let i = 0; i < 10; ++i) {
    randomInts.push(randomInt(1000)+32);
}
const randomString = String.fromCodePoint.apply(null, randomInts);
console.log(randomString);

String.prototype.centeredText = function(width, decorator) {
    decorator = decorator || "<>";
    let padLeft = width / 2 + this.length / 2;
    return this.padStart(padLeft, decorator).padEnd(width, decorator);
};

// "This text should be nicely centered".centeredText(80);

function capitalizeFirstLetter(str) {
    if(str.length < 1)
        return "";
    return str[0].toUpperCase() + str.slice(1);
}
let sentence = "this is a title header".split(' ').map(word => capitalizeFirstLetter(word)).join(' ').centeredText(80, "<*>");
console.log(sentence);

let env = System.getenv();
let sortedVarNames = Object.keys(env).sort();
for(let eachVarName in sortedVarNames) {
    console.log(`${eachVarName}: ${env[eachVarName]}`);
}
