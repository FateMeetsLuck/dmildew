/*
Introducing Generators, a feature that brings coroutines from Lua and JavaScript to Mildew. Generators can be declared using 
an asterisk after the function keyword for a function that contains yield expressions, or created from any arbitrary
function with the Generator constructor. For-of loops work on Generator objects as well!
*/
function *foo(a, b) {
    yield a;
    yield b;
    for(let i = 0; i < 4; ++i) {
        // printing is out of order, presumably due to D's implementation of yield()?
        console.log(`foo: value of i*i is ${i*i}`);
        yield i * i;
    }
    return -42;
}

let myGen = foo(69, 120);
console.log("Getting the first yield...");
let result = myGen.next();
while(!result.done) {
    console.log(`Yielded value = ${result.value}`);
    result = myGen.next();
}
console.log("Last result: " + result);
console.log("The generator is done");
console.log("The return value is ", myGen.returnValue);
console.log(myGen + " is finished");
console.log(isdefined("__yield__")); // always false outside of Generator functions

function works() {
    __yield__(-1);
    return 55555;
}

const worksGen = new Generator(works);
console.log("Works gen");
console.log(worksGen.returnValue);
console.log(worksGen.next());
console.log(worksGen.returnValue);

const gen2 = function* (a) {
    yield a;
    yield a + 1;
    yield a + 2;
};

const otherGen = gen2(20);
for(let value of otherGen) {
    console.log("value is", value);
}

// shamelessly taken from Mozilla's MDN website but it works 100% the same somehow
function* gen() {
    while(true) {
        try {
            yield 42;
        } catch(e) {
            console.log('Error caught!');
        }
    }
}

const g = gen();
g.next();
// { value: 42, done: false }
const res = g.throw('Something went wrong');
// "Error caught!"
console.log(res);
// { value: 42, done: false }

// As of Feb 27 11:56 2021 This program produces the correct values but the output is out of sync with yield