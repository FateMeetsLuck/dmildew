function foo(a, b) {
    __yield__(this);
    __yield__(100);
    __yield__(a);
    function test() {
        __yield__("test");
    }
    for(let i = 0; i < 4; ++i) {
        console.log("Trying to yield " + i * i);
        __yield__(i * i);
    }
    test();
    __yield__("after test");
    __yield__("after test again");
    let something = __yield__(a + b);
    console.log("In generator something=",something);
    return -2;
}

let myGen = new Generator(foo, 69, 1200);
console.log("Getting the first yield...");
let result = myGen.next(69);
while(!result.done) {
    console.log(result.value);
    console.log("Getting the next yield...");
    result = myGen.next(69);
}
console.log("Last result: " + result);
console.log("The generator is done");
console.log("The return value is ", myGen.returnValue);
console.log(myGen + " is finished");
console.log(isdefined("__yield__")); // always false outside of Generator functions
return 3000;


