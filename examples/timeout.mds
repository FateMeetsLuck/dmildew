/*
Experimental asynchronous single threaded function: setTimeout
This program executes these callbacks in an entirely different order than Node
This may be due to an implementation of D's yield function.

Note that due to the implementation of for-loops, to use closures that refer to
the iteration variable, i in this case, one has to copy i into a declaration, thus
forming a scope and unique environment in the for-loop.
*/

function startTimers(name) {
    for(let i = 0; i < 5; ++i) {
        let x = i;
        let timeout = setTimeout(()=>console.log(`${name} ${x}`), i* 1000);
        if(i == 1)
            clearTimeout(timeout);
    }
}
startTimers("first");
startTimers("second");
console.log("Starting timers");

function testClass() {
    class Foo {
        constructor() {
            this.a = 42;
        }
        setTimer() {
            setTimeout(()=>{
                console.log(this.a);
            }, 100);
        }
    }

    let foo = new Foo();
    foo.setTimer();
}
testClass();