/*
Old school JavaScript inheritance works the same in Mildew. Functions have a prototype field that becomes an
object's __proto__ field when instantiated with new. Note that a for-in loop query of an Object does not
recursively search the __proto__ chain.
 */
function Person(name, age) {
    this.name = name;
    this.age = age;
}

Person.prototype.greet = function() {
    console.log(`${this.name} says hello.`);
};

function Employee(name, age, placeOfWork) {
    Person.call(this, name, age);
    this.placeOfWork = placeOfWork;
}

Employee.prototype = Object.create(Person.prototype);
Employee.prototype.work = function() {
    console.log(`${this.name} is working.`);
};

var e1 = new Employee("Courtney", 30, "Gas station");
var e2 = new Employee("Doge", 11, "Internet");
e1.greet();
e1.work();
console.log(e1);
e2.greet();
e2.work();
console.log(e2);
console.log(e2.__proto__);
var p1 = new Person("Joseph Stalin", 74);
p1.greet();
console.log(p1.__proto__);
// As of Feb 18 15:36 2021 This program produces the correct output