/*
Copyright (c) 2014 Forbes Lindesay

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-------------------------------------------------------------------------------
"Borrowed" from https://github.com/then/promise/blob/master/src/core.js
 */

let asap = setImmediate;

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.


// to avoid using try/catch inside critical functions, we
// extract them to here.
let LAST_ERROR = null;
let IS_ERROR = {};
function getThen(obj) {
    try {
        return obj.then;
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}

function valuePromise(value) {
    let p = new Promise(Promise._noop);
    p._state = 1;
    p._value = value;
    return p;
}

function tryCallOne(fn, a) {
    try {
        return fn(a);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}
function tryCallTwo(fn, a, b) {
    try {
        fn(a, b);
    } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
    }
}

var Promise = function Promise(fn) {
    if (typeof this !== 'object') {
        throw 'Promises must be constructed via new';
    }
    if (typeof fn !== 'function') {
        throw 'Promise constructor\'s argument is not a function';
    }
    this._deferredState = 0;
    this._state = 0;
    this._value = null;
    this._deferreds = null;
    // this._action = fn;
    if (fn === noop) return;
    doResolve(fn, this);
};

Promise._onHandle = null;
Promise._onReject = null;
Promise._noop = noop;

Promise.all = function(promises) {
    promises = Array.from(promises);
    let resolved = 0;
    let results = new Array(promises.length);
    return new Promise((resolve, reject)=>{
        for(let i, promise in promises) {
            promise
                .then(result => {
                    // results.push(result);
                    results[i] = result;
                    if(++resolved === promises.length) resolve(results);
                })
                .catch(e => { 
                    reject(e);
                });
        }
    });
};

Promise.allSettled = function(promises) {
    promises = Array.from(promises);
    let resolvedOrRejected = 0;
    let results = new Array(promises.length);
    return new Promise((resolve, reject)=>{
        for(let i, promise in promises) {
            promise
                .then(result => {
                    results[i] = {
                        status: "fulfilled",
                        value: result
                    };
                    if(++resolvedOrRejected == promises.length) resolve(results); 
                })
                .catch(err => {
                    results[i] = {
                        status: "rejected",
                        value: err
                    };
                    if(++resolvedOrRejected == promises.length) resolve(results);
                });
        }
    });
};

Promise.any = function(promises) {
    promises = Array.from(promises);
    let rejected = 0;
    let rejections = new Array(promises.length);
    return new Promise((resolve, reject)=>{
        for(let i, promise in promises) {
            promise
                .then(result => {
                    resolve(result);
                })
                .catch(e => {
                    rejections[i] = e;
                    if(++rejected == promises.length) reject(rejections);
                });
        }
    });
};

Promise.race = function(promises) {
    promises = Array.from(promises);
    return new Promise((resolve, reject)=>{
        for(let promise in promises) {
            promise 
                .then(result => {
                    resolve(result);
                })
                .catch(e => {
                    reject(e);
                });
        }
    });
};

Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
        reject(value);
    });
};

Promise.resolve = function(value) {
    if(value instanceof Promise) return value;

    if(value === null) return valuePromise(null);
    if(value === undefined) return valuePromise(undefined);
    if(value === true) return valuePromise(true);
    if(value === false) return valuePromise(false);
    if(value === 0) return valuePromise(0);
    if(value === '') return valuePromise('');

    if(typeof value === 'object' || typeof value === 'function') {
        try {
            let then = value.then;
            if(typeof then === 'function') {
                return new Promise(then.bind(value));
            }
        } catch(ex) {
            return  new Promise((resolve, reject) => {
                reject(ex);
            });
        } 
    }
    return valuePromise(value);
};

Promise.prototype.done = function (onFulfilled, onRejected) {
    let self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
        setTimeout(function () {
            throw err;
        }, 0);
    });
};

Promise.prototype.catch = function(onRejected) {
    return this.then(null, onRejected);
};

Promise.prototype.finally = function (f) {
    return this.then(function (value) {
        return Promise.resolve(f()).then(function () {
            return value;
        });
    }, function (err) {
        return Promise.resolve(f()).then(function () {
            throw err;
        });
    });
};

Promise.prototype.then = function(onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
        return safeThen(this, onFulfilled, onRejected);
    }
    let res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
};

function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
        let res = new Promise(noop);
        res.then(resolve, reject);
        handle(self, new Handler(onFulfilled, onRejected, res));
    });
}

function handle(self, deferred) {
    while (self._state === 3) {
        self = self._value;
    }
    if (Promise._onHandle) {
        Promise._onHandle(self);
    }
    if (self._state === 0) {
        if (self._deferredState === 0) {
            self._deferredState = 1;
            self._deferreds = deferred;
            return;
        }
        if (self._deferredState === 1) {
            self._deferredState = 2;
            self._deferreds = [self._deferreds, deferred];
            return;
        }
        self._deferreds.push(deferred);
        return;
    }
    handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
    self._fiber = asap(function() {
        let cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
            if (self._state === 1) {
                resolve(deferred.promise, self._value);
            } else {
                reject(deferred.promise, self._value);
            }
            return;
        }
        let ret = tryCallOne(cb, self._value);
        if (ret === IS_ERROR) {
            reject(deferred.promise, LAST_ERROR);
        } else {
            resolve(deferred.promise, ret);
        }
    });
}
function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
        return reject(
            self,
            'A promise cannot be resolved with itself.'
        );
    }
    if (
        newValue &&
        (typeof newValue === 'object' || typeof newValue === 'function')
    ) {
        let then = getThen(newValue);
        if (then === IS_ERROR) {
            return reject(self, LAST_ERROR);
        }
        if (
            then === self.then &&
            newValue instanceof Promise
        ) {
            self._state = 3;
            self._value = newValue;
            finale(self);
            return;
        } else if (typeof then === 'function') {
            doResolve(then.bind(newValue), self);
            return;
        }
    }
    self._state = 1;
    self._value = newValue;
    finale(self);
}

function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    if (Promise._onReject) {
        Promise._onReject(self, newValue);
    }
    finale(self);
}
function finale(self) {
    if (self._deferredState === 1) {
        handle(self, self._deferreds);
        self._deferreds = null;
    }
    if (self._deferredState === 2) {
        for (let i = 0; i < self._deferreds.length; i++) {
            handle(self, self._deferreds[i]);
        }
        self._deferreds = null;
    }
}

function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
    let done = false;
    let res = tryCallTwo(fn, 
        function (value) {
            if (done) return;
            done = true;
            resolve(promise, value);
        }, 
        function (reason) {
            if (done) return;
            done = true;
            reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
    }
}

//=============================================================================


function calculate(num1, operator, num2) {
    return new Promise((resolve, reject)=>{
        if(operator === '+') {
            resolve(num1 + num2);
            // setTimeout(resolve, 0, num1 + num2);
        } else {
            reject("Only addition is supported");
        }
    });
}

function delayedCodePoints(s1) {
    return new Promise((resolve, reject)=>{
        if(typeof s1 === "string" && s1.length > 0) {
            let result = s1.split("").map(ch => ch.charCodeAt(0));
            setTimeout(resolve, 150, result);
        } else {
            reject("Not a string containing any characters");
        }
    });
}

function testPromise() {
    calculate(5, "+", 31)
        .then(result => delayedCodePoints(result + ""))
        .then(result => console.log("Calculate 5+31: " + result))
        .catch(error => console.error("Error calculate 5+31: " + error));

    Promise.resolve(69).then(result => console.log("Promise resolve 69 result: " + result))
        .catch(err => console.error("Something went wrong with Promise.resolve: " + err));

    calculate(5, "-", 10)
        .then(result => console.log("Calculate 5-10: " + result))
        .catch(err => console.error("Error calculate 5-10: " + err));

    calculate(69, "+", 11)
        .then(result => console.log("Calculate 69+11: " + result))
        .catch(err => console.error("Error calculate 69+11: " + err));

    calculate(69, "+", 420)
        .then(result => { throw "This calculation may be offensive"; })
        .catch(err => console.error("Error calculate 69+420: " + err));

    delayedCodePoints("foo")
        .then(result => console.log("delayedCodePoints 'foo': " + result))
        .catch(err => console.error("Error delayedCodePoints foo: " + err));

    delayedCodePoints("blah blah")
        .done(result => console.log("delayedCodePoints blah blah done: " + result));
}

function testPromiseAll() {
    Promise.all([calculate(10, "+", 5), calculate(21, "+", -11), calculate("foo", "+", "bar")])
        .then(result => console.log("Result promise all 0: " + result))
        .catch(err => console.error("Error promise all 0: " + err))
        .finally(()=> console.log("Finally promise all 0"));

    Promise.all([delayedCodePoints("foo bar"), calculate(9, "-", 9)])
        .then(result => console.log("result promise all 1: " + result))
        .catch(err => console.log("Error promise all 1: " + err))
        .finally(() => console.log("Finally promise all 1:"));

    Promise.all([delayedCodePoints(""), delayedCodePoints("bc")])
        .then(result => console.log("Result promise all 2: " + result))
        .catch(err => console.log("Error promise all 2: " + err));
}

function testPromiseRace() {
    Promise.race([delayedCodePoints("ass"), calculate(4, "+", 4)])
        .then(result => console.log("Promise.race result: " + result))
        .catch(error => console.error("Promise.race error: " + error));
}

Promise.any([calculate(14, "/", 88), delayedCodePoints(9000)])
    .then(result => console.log("Promise.any success: " + result))
    .catch(errors => console.error("Promise.any errors: " + errors));

Promise.reject("This is a Promise.reject test")
    .then(result => console.log("Promise.reject resolved when it shouldn't have"))
    .catch(error => console.error("Catch: " + error));

testPromise();
testPromiseAll();
testPromiseRace();

Promise.allSettled([calculate(14, "*", 88), delayedCodePoints("word")])
    .then(results => console.log("Promise.allSettled result: " + results))
    .catch(() => console.error("This should never catch"));